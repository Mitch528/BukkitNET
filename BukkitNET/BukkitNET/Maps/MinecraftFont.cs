using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BukkitNET.Maps
{
    public class MinecraftFont : MapFont
    {

        private const int spaceSize = 2;

        private static string fontChars =
       " !\"#$%&'()*+,-./0123456789:;<=>?" +
       "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_" +
       "'abcdefghijklmnopqrstuvwxyz{|}~\u007F" +
       "\u00C7\u00FC\u00E9\u00E2\u00E4\u00E0\u00E5\u00E7" + // Çüéâäàåç
       "\u00EA\u00EB\u00E8\u00EF\u00EE\u00EC\u00C4\u00C5" + // êëèïîìÄÅ
       "\u00C9\u00E6\u00C6\u00F4\u00F6\u00F2\u00FB\u00F9" + // ÉæÆôöòûù
       "\u00FF\u00D6\u00DC\u00F8\u00A3\u00D8\u00D7\u0191" + // ÿÖÜø£Ø×ƒ
       "\u00E1\u00ED\u00F3\u00FA\u00F1\u00D1\u00AA\u00BA" + // áíóúñÑªº
       "\u00BF\u00AE\u00AC\u00BD\u00BC\u00A1\u00AB\u00BB"; // ¿®¬½¼¡«»

        private static int[][] fontData = new int[][] {
        new[] /* null */ {0,0,0,0,0,0,0,0},
        new[] /* 1 */ {126,129,165,129,189,153,129,126},
        new[] /* 2 */ {126,255,219,255,195,231,255,126},
        new[] /* 3 */ {54,127,127,127,62,28,8,0},
        new[] /* 4 */ {8,28,62,127,62,28,8,0},
        new[] /* 5 */ {28,62,28,127,127,62,28,62},
        new[] /* 6 */ {8,8,28,62,127,62,28,62},
        new[] /* 7 */ {0,0,24,60,60,24,0,0},
        new[] /* 8 */ {255,255,231,195,195,231,255,255},
        new[] /* 9 */ {0,60,102,66,66,102,60,0},
        new[] /* 10 */ {255,195,153,189,189,153,195,255},
        new[] /* 11 */ {240,224,240,190,51,51,51,30},
        new[] /* 12 */ {60,102,102,102,60,24,126,24},
        new[] /* 13 */ {252,204,252,12,12,14,15,7},
        new[] /* 14 */ {254,198,254,198,198,230,103,3},
        new[] /* 15 */ {153,90,60,231,231,60,90,153},
        new[] /* 16 */ {1,7,31,127,31,7,1,0},
        new[] /* 17 */ {64,112,124,127,124,112,64,0},
        new[] /* 18 */ {24,60,126,24,24,126,60,24},
        new[] /* 19 */ {102,102,102,102,102,0,102,0},
        new[] /* 20 */ {254,219,219,222,216,216,216,0},
        new[] /* 21 */ {124,198,28,54,54,28,51,30},
        new[] /* 22 */ {0,0,0,0,126,126,126,0},
        new[] /* 23 */ {24,60,126,24,126,60,24,255},
        new[] /* 24 */ {24,60,126,24,24,24,24,0},
        new[] /* 25 */ {24,24,24,24,126,60,24,0},
        new[] /* 26 */ {0,24,48,127,48,24,0,0},
        new[] /* 27 */ {0,12,6,127,6,12,0,0},
        new[] /* 28 */ {0,0,3,3,3,127,0,0},
        new[] /* 29 */ {0,36,102,255,102,36,0,0},
        new[] /* 30 */ {0,24,60,126,255,255,0,0},
        new[] /* 31 */ {0,255,255,126,60,24,0,0},
        new[] /* */ {0,0,0,0,0,0,0,0},
        new[] /* ! */ {1,1,1,1,1,0,1,0},
        new[] /* " */ {10,10,5,0,0,0,0,0},
        new[] /* # */ {10,10,31,10,31,10,10,0},
        new[] /* $ */ {4,30,1,14,16,15,4,0},
        new[] /* % */ {17,9,8,4,2,18,17,0},
        new[] /* & */ {4,10,4,22,13,9,22,0},
        new[] /* ' */ {2,2,1,0,0,0,0,0},
        new[] /* ( */ {12,2,1,1,1,2,12,0},
        new[] /* ) */ {3,4,8,8,8,4,3,0},
        new[] /* * */ {0,0,9,6,9,0,0,0},
        new[] /* + */ {0,4,4,31,4,4,0,0},
        new[] /* , */ {0,0,0,0,0,1,1,1},
        new[] /* - */ {0,0,0,31,0,0,0,0},
        new[] /* . */ {0,0,0,0,0,1,1,0},
        new[] /* / */ {16,8,8,4,2,2,1,0},
        new[] /* 0 */ {14,17,25,21,19,17,14,0},
        new[] /* 1 */ {4,6,4,4,4,4,31,0},
        new[] /* 2 */ {14,17,16,12,2,17,31,0},
        new[] /* 3 */ {14,17,16,12,16,17,14,0},
        new[] /* 4 */ {24,20,18,17,31,16,16,0},
        new[] /* 5 */ {31,1,15,16,16,17,14,0},
        new[] /* 6 */ {12,2,1,15,17,17,14,0},
        new[] /* 7 */ {31,17,16,8,4,4,4,0},
        new[] /* 8 */ {14,17,17,14,17,17,14,0},
        new[] /* 9 */ {14,17,17,30,16,8,6,0},
        new[] /* : */ {0,1,1,0,0,1,1,0},
        new[] /* ; */ {0,1,1,0,0,1,1,1},
        new[] /* < */ {8,4,2,1,2,4,8,0},
        new[] /* = */ {0,0,31,0,0,31,0,0},
        new[] /* > */ {1,2,4,8,4,2,1,0},
        new[] /* ? */ {14,17,16,8,4,0,4,0},
        new[] /* @ */ {30,33,45,45,61,1,30,0},
        new[] /* A */ {14,17,31,17,17,17,17,0},
        new[] /* B */ {15,17,15,17,17,17,15,0},
        new[] /* C */ {14,17,1,1,1,17,14,0},
        new[] /* D */ {15,17,17,17,17,17,15,0},
        new[] /* E */ {31,1,7,1,1,1,31,0},
        new[] /* F */ {31,1,7,1,1,1,1,0},
        new[] /* G */ {30,1,25,17,17,17,14,0},
        new[] /* H */ {17,17,31,17,17,17,17,0},
        new[] /* I */ {7,2,2,2,2,2,7,0},
        new[] /* J */ {16,16,16,16,16,17,14,0},
        new[] /* K */ {17,9,7,9,17,17,17,0},
        new[] /* L */ {1,1,1,1,1,1,31,0},
        new[] /* M */ {17,27,21,17,17,17,17,0},
        new[] /* N */ {17,19,21,25,17,17,17,0},
        new[] /* O */ {14,17,17,17,17,17,14,0},
        new[] /* P */ {15,17,15,1,1,1,1,0},
        new[] /* Q */ {14,17,17,17,17,9,22,0},
        new[] /* R */ {15,17,15,17,17,17,17,0},
        new[] /* S */ {30,1,14,16,16,17,14,0},
        new[] /* T */ {31,4,4,4,4,4,4,0},
        new[] /* U */ {17,17,17,17,17,17,14,0},
        new[] /* V */ {17,17,17,17,10,10,4,0},
        new[] /* W */ {17,17,17,17,21,27,17,0},
        new[] /* X */ {17,10,4,10,17,17,17,0},
        new[] /* Y */ {17,10,4,4,4,4,4,0},
        new[] /* Z */ {31,16,8,4,2,1,31,0},
        new[] /* [ */ {7,1,1,1,1,1,7,0},
        new[] /* \ */ {1,2,2,4,8,8,16,0},
        new[] /* ] */ {7,4,4,4,4,4,7,0},
        new[] /* ^ */ {4,10,17,0,0,0,0,0},
        new[] /* _ */ {0,0,0,0,0,0,0,31},
        new[] /* ` */ {1,1,2,0,0,0,0,0},
        new[] /* a */ {0,0,14,16,30,17,30,0},
        new[] /* b */ {1,1,13,19,17,17,15,0},
        new[] /* c */ {0,0,14,17,1,17,14,0},
        new[] /* d */ {16,16,22,25,17,17,30,0},
        new[] /* e */ {0,0,14,17,31,1,30,0},
        new[] /* f */ {12,2,15,2,2,2,2,0},
        new[] /* g */ {0,0,30,17,17,30,16,15},
        new[] /* h */ {1,1,13,19,17,17,17,0},
        new[] /* i */ {1,0,1,1,1,1,1,0},
        new[] /* j */ {16,0,16,16,16,17,17,14},
        new[] /* k */ {1,1,9,5,3,5,9,0},
        new[] /* l */ {1,1,1,1,1,1,2,0},
        new[] /* m */ {0,0,11,21,21,17,17,0},
        new[] /* n */ {0,0,15,17,17,17,17,0},
        new[] /* o */ {0,0,14,17,17,17,14,0},
        new[] /* p */ {0,0,13,19,17,15,1,1},
        new[] /* q */ {0,0,22,25,17,30,16,16},
        new[] /* r */ {0,0,13,19,1,1,1,0},
        new[] /* s */ {0,0,30,1,14,16,15,0},
        new[] /* t */ {2,2,7,2,2,2,4,0},
        new[] /* u */ {0,0,17,17,17,17,30,0},
        new[] /* v */ {0,0,17,17,17,10,4,0},
        new[] /* w */ {0,0,17,17,21,21,30,0},
        new[] /* x */ {0,0,17,10,4,10,17,0},
        new[] /* y */ {0,0,17,17,17,30,16,15},
        new[] /* z */ {0,0,31,8,4,2,31,0},
        new[] /* { */ {12,2,2,1,2,2,12,0},
        new[] /* | */ {1,1,1,0,1,1,1,0},
        new[] /* } */ {3,4,4,8,4,4,3,0},
        new[] /* ~ */ {38,25,0,0,0,0,0,0},
        new[] /* ⌂ */ {0,0,4,10,17,17,31,0},
        new[] /* Ç */ {14,17,1,1,17,14,16,12},
        new[] /* ü */ {10,0,17,17,17,17,30,0},
        new[] /* é */ {24,0,14,17,31,1,30,0},
        new[] /* â */ {14,17,14,16,30,17,30,0},
        new[] /* ä */ {10,0,14,16,30,17,30,0},
        new[] /* à */ {3,0,14,16,30,17,30,0},
        new[] /* å */ {4,0,14,16,30,17,30,0},
        new[] /* ç */ {0,14,17,1,17,14,16,12},
        new[] /* ê */ {14,17,14,17,31,1,30,0},
        new[] /* ë */ {10,0,14,17,31,1,30,0},
        new[] /* è */ {3,0,14,17,31,1,30,0},
        new[] /* ï */ {5,0,2,2,2,2,2,0},
        new[] /* î */ {14,17,4,4,4,4,4,0},
        new[] /* ì */ {3,0,2,2,2,2,2,0},
        new[] /* Ä */ {17,14,17,31,17,17,17,0},
        new[] /* Å */ {4,0,14,17,31,17,17,0},
        new[] /* É */ {24,0,31,1,7,1,31,0},
        new[] /* æ */ {0,0,10,20,30,5,30,0},
        new[] /* Æ */ {30,5,15,5,5,5,29,0},
        new[] /* ô */ {14,17,14,17,17,17,14,0},
        new[] /* ö */ {10,0,14,17,17,17,14,0},
        new[] /* ò */ {3,0,14,17,17,17,14,0},
        new[] /* û */ {14,17,0,17,17,17,30,0},
        new[] /* ù */ {3,0,17,17,17,17,30,0},
        new[] /* ÿ */ {10,0,17,17,17,30,16,15},
        new[] /* Ö */ {17,14,17,17,17,17,14,0},
        new[] /* Ü */ {17,0,17,17,17,17,14,0},
        new[] /* ø */ {0,0,14,25,21,19,14,4},
        new[] /* £ */ {12,18,2,15,2,2,31,0},
        new[] /* Ø */ {14,17,25,21,19,17,14,0},
        new[] /* × */ {0,0,5,2,5,0,0,0},
        new[] /* ƒ */ {8,20,4,14,4,4,5,2},
        new[] /* á */ {24,0,14,16,30,17,30,0},
        new[] /* í */ {3,0,1,1,1,1,1,0},
        new[] /* ó */ {24,0,14,17,17,17,14,0},
        new[] /* ú */ {24,0,17,17,17,17,30,0},
        new[] /* ñ */ {31,0,15,17,17,17,17,0},
        new[] /* Ñ */ {31,0,17,19,21,25,17,0},
        new[] /* ª */ {14,16,31,30,0,31,0,0},
        new[] /* º */ {14,17,17,14,0,31,0,0},
        new[] /* ¿ */ {4,0,4,2,1,17,14,0},
        new[] /* ® */ {0,30,45,37,43,30,0,0},
        new[] /* ¬ */ {0,0,0,31,16,16,0,0},
        new[] /* ½ */ {17,9,8,4,18,10,25,0},
        new[] /* ¼ */ {17,9,8,4,26,26,17,0},
        new[] /* ¡ */ {0,1,0,1,1,1,1,0},
        new[] /* « */ {0,20,10,5,10,20,0,0},
        new[] /* » */ {0,5,10,20,10,5,0,0},
        new[] /* 176 */ {68,17,68,17,68,17,68,17},
        new[] /* 177 */ {170,85,170,85,170,85,170,85},
        new[] /* 178 */ {219,238,219,119,219,238,219,119},
        new[] /* 179 */ {24,24,24,24,24,24,24,24},
        new[] /* 180 */ {24,24,24,24,31,24,24,24},
        new[] /* 181 */ {24,24,31,24,31,24,24,24},
        new[] /* 182 */ {108,108,108,108,111,108,108,108},
        new[] /* 183 */ {0,0,0,0,127,108,108,108},
        new[] /* 184 */ {0,0,31,24,31,24,24,24},
        new[] /* 185 */ {108,108,111,96,111,108,108,108},
        new[] /* 186 */ {108,108,108,108,108,108,108,108},
        new[] /* 187 */ {0,0,127,96,111,108,108,108},
        new[] /* 188 */ {108,108,111,96,127,0,0,0},
        new[] /* 189 */ {108,108,108,108,127,0,0,0},
        new[] /* 190 */ {24,24,31,24,31,0,0,0},
        new[] /* 191 */ {0,0,0,0,31,24,24,24},
        new[] /* 192 */ {24,24,24,24,248,0,0,0},
        new[] /* 193 */ {24,24,24,24,255,0,0,0},
        new[] /* 194 */ {0,0,0,0,255,24,24,24},
        new[] /* 195 */ {24,24,24,24,248,24,24,24},
        new[] /* 196 */ {0,0,0,0,255,0,0,0},
        new[] /* 197 */ {24,24,24,24,255,24,24,24},
        new[] /* 198 */ {24,24,248,24,248,24,24,24},
        new[] /* 199 */ {108,108,108,108,236,108,108,108},
        new[] /* 200 */ {108,108,236,12,252,0,0,0},
        new[] /* 201 */ {0,0,252,12,236,108,108,108},
        new[] /* 202 */ {108,108,239,0,255,0,0,0},
        new[] /* 203 */ {0,0,255,0,239,108,108,108},
        new[] /* 204 */ {108,108,236,12,236,108,108,108},
        new[] /* 205 */ {0,0,255,0,255,0,0,0},
        new[] /* 206 */ {108,108,239,0,239,108,108,108},
        new[] /* 207 */ {24,24,255,0,255,0,0,0},
        new[] /* 208 */ {108,108,108,108,255,0,0,0},
        new[] /* 209 */ {0,0,255,0,255,24,24,24},
        new[] /* 210 */ {0,0,0,0,255,108,108,108},
        new[] /* 211 */ {108,108,108,108,252,0,0,0},
        new[] /* 212 */ {24,24,248,24,248,0,0,0},
        new[] /* 213 */ {0,0,248,24,248,24,24,24},
        new[] /* 214 */ {0,0,0,0,252,108,108,108},
        new[] /* 215 */ {108,108,108,108,255,108,108,108},
        new[] /* 216 */ {24,24,255,24,255,24,24,24},
        new[] /* 217 */ {24,24,24,24,31,0,0,0},
        new[] /* 218 */ {0,0,0,0,248,24,24,24},
        new[] /* 219 */ {255,255,255,255,255,255,255,255},
        new[] /* 220 */ {0,0,0,0,255,255,255,255},
        new[] /* 221 */ {15,15,15,15,15,15,15,15},
        new[] /* 222 */ {240,240,240,240,240,240,240,240},
        new[] /* 223 */ {255,255,255,255,0,0,0,0},
        new[] /* 224 */ {0,0,110,59,19,59,110,0},
        new[] /* 225 */ {0,30,51,31,51,31,3,3},
        new[] /* 226 */ {0,63,51,3,3,3,3,0},
        new[] /* 227 */ {0,127,54,54,54,54,54,0},
        new[] /* 228 */ {63,51,6,12,6,51,63,0},
        new[] /* 229 */ {0,0,126,27,27,27,14,0},
        new[] /* 230 */ {0,102,102,102,102,62,6,3},
        new[] /* 231 */ {0,110,59,24,24,24,24,0},
        new[] /* 232 */ {63,12,30,51,51,30,12,63},
        new[] /* 233 */ {28,54,99,127,99,54,28,0},
        new[] /* 234 */ {28,54,99,99,54,54,119,0},
        new[] /* 235 */ {56,12,24,62,51,51,30,0},
        new[] /* 236 */ {0,0,126,219,219,126,0,0},
        new[] /* 237 */ {96,48,126,219,219,126,6,3},
        new[] /* 238 */ {28,6,3,31,3,6,28,0},
        new[] /* 239 */ {30,51,51,51,51,51,51,0},
        new[] /* 240 */ {0,63,0,63,0,63,0,0},
        new[] /* 241 */ {12,12,63,12,12,0,63,0},
        new[] /* 242 */ {6,12,24,12,6,0,63,0},
        new[] /* 243 */ {24,12,6,12,24,0,63,0},
        new[] /* 244 */ {112,216,216,24,24,24,24,24},
        new[] /* 245 */ {24,24,24,24,24,27,27,14},
        new[] /* 246 */ {12,12,0,63,0,12,12,0},
        new[] /* 247 */ {0,110,59,0,110,59,0,0},
        new[] /* 248 */ {28,54,54,28,0,0,0,0},
        new[] /* 249 */ {0,0,0,24,24,0,0,0},
        new[] /* 250 */ {0,0,0,0,24,0,0,0},
        new[] /* 251 */ {240,48,48,48,55,54,60,56},
        new[] /* 252 */ {30,54,54,54,54,0,0,0},
        new[] /* 253 */ {14,24,12,6,30,0,0,0},
        new[] /* 254 */ {0,0,60,60,60,60,0,0},
        new[] /* 255 */ {0,0,0,0,0,0,0,0},
       };

        public static readonly MinecraftFont Font = new MinecraftFont(false);

        public MinecraftFont() : this(true)
        {
        }

        private MinecraftFont(bool malleable)
        {
            for (int i = 1; i < fontData.Length; ++i)
            {
                char ch = (char)i;
                if (i >= 32 && i < 32 + fontChars.Length)
                {
                    ch = fontChars[i - 32];
                }

                if (ch == ' ')
                {
                    SetChar(ch, new CharacterSprite(spaceSize, 8, new bool[spaceSize * 8]));
                    continue;
                }

                int[] rows = fontData[i];
                int width = 0;
                for (int r = 0; r < 8; ++r)
                {
                    for (int c = 0; c < 8; ++c)
                    {
                        if ((rows[r] & (1 << c)) != 0 && c > width)
                        {
                            width = c;
                        }
                    }
                }
                ++width;

                bool[] data = new bool[width * 8];
                for (int r = 0; r < 8; ++r)
                {
                    for (int c = 0; c < width; ++c)
                    {
                        data[r * width + c] = (rows[r] & (1 << c)) != 0;
                    }
                }

                SetChar(ch, new CharacterSprite(width, 8, data));
            }

            this.malleable = malleable;
        }



    }
}
